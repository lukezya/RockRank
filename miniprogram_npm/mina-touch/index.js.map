{"version":3,"sources":["mina-touch.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["const DEFAULT_OPTIONS = {\r\n    touchStart: function () { },\r\n    touchMove: function () { },\r\n    touchEnd: function () { },\r\n    touchCancel: function () { },\r\n    multipointStart: function () { },\r\n    multipointEnd: function () { },\r\n    tap: function () { },\r\n    doubleTap: function () { },\r\n    longTap: function () { },\r\n    singleTap: function () { },\r\n    rotate: function () { },\r\n    pinch: function () { },\r\n    pressMove: function () { },\r\n    swipe: function () { }\r\n}\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });class MinaTouch {\r\n    constructor(_page, name, option = {}) {\r\n        this.preV = { x: null, y: null };\r\n        this.pinchStartLen = null;\r\n        this.scale = 1;\r\n        this.isDoubleTap = false;\r\n\r\n        this.delta = null;\r\n        this.last = null;\r\n        this.now = null;\r\n        this.tapTimeout = null;\r\n        this.singleTapTimeout = null;\r\n        this.longTapTimeout = null;\r\n        this.swipeTimeout = null;\r\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\r\n        this.preTapPosition = { x: null, y: null };\r\n\r\n        this.lastZoom = 1;\r\n        this.tempZoom = 1;\r\n\r\n        try {\r\n            if (this._checkBeforeCreate(_page, name)) {\r\n                this._name = name\r\n                this._option = { ...DEFAULT_OPTIONS, ...option }\r\n                _page[name] = this\r\n                this._bindFunc(_page)\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n    _checkBeforeCreate(_page, name) {\r\n        if (!_page || !name) {\r\n            throw new Error('MinaTouch实例化时，必须传入page对象和引用名')\r\n        }\r\n        if (_page[name]) {\r\n            throw new Error('MinaTouch实例化error： ' + name + ' 已经存在page中')\r\n        }\r\n        return true\r\n    }\r\n    _bindFunc(_page) {\r\n        let funcNames = ['start', 'move', 'end', 'cancel']\r\n        for (let funcName of funcNames)\r\n            _page[this._name + '.' + funcName] = this[funcName].bind(this)\r\n    }\r\n    start(evt) {\r\n        if (!evt.touches) return;\r\n        this.now = Date.now();\r\n        this.x1 = evt.touches[0].pageX == null ? evt.touches[0].x : evt.touches[0].pageX;\r\n        this.y1 = evt.touches[0].pageY == null ? evt.touches[0].y : evt.touches[0].pageY;\r\n        this.delta = this.now - (this.last || this.now);\r\n        this._option.touchStart(evt);\r\n        if (this.preTapPosition.x !== null) {\r\n            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\r\n        }\r\n        this.preTapPosition.x = this.x1;\r\n        this.preTapPosition.y = this.y1;\r\n        this.last = this.now;\r\n        let preV = this.preV,\r\n            len = evt.touches.length;\r\n        if (len > 1) {\r\n            this._cancelLongTap();\r\n            this._cancelSingleTap();\r\n            let otx = evt.touches[1].pageX == null ? evt.touches[1].x : evt.touches[1].pageX;\r\n            let oty = evt.touches[1].pageY == null ? evt.touches[1].y : evt.touches[1].pageY;\r\n            let v = { x: otx - this.x1, y: oty - this.y1 };\r\n            preV.x = v.x;\r\n            preV.y = v.y;\r\n            this.pinchStartLen = getLen(preV);\r\n            this._option.multipointStart(evt);\r\n        }\r\n        this.longTapTimeout = setTimeout(function () {\r\n            evt.type = \"longTap\";\r\n            this._option.longTap(evt);\r\n        }.bind(this), 750);\r\n    }\r\n    move(evt) {\r\n        if (!evt.touches) return;\r\n        let preV = this.preV,\r\n            len = evt.touches.length,\r\n            currentX = evt.touches[0].pageX == null ? evt.touches[0].x : evt.touches[0].pageX,\r\n            currentY = evt.touches[0].pageY == null ? evt.touches[0].y : evt.touches[0].pageY;\r\n        this.isDoubleTap = false;\r\n        if (len > 1) {\r\n            let otx = evt.touches[1].pageX == null ? evt.touches[1].x : evt.touches[1].pageX;\r\n            let oty = evt.touches[1].pageY == null ? evt.touches[1].y : evt.touches[1].pageY;\r\n            let v = { x: otx - currentX, y: oty - currentY };\r\n\r\n            if (preV.x !== null) {\r\n                if (this.pinchStartLen > 0) {\r\n                    evt.singleZoom = getLen(v) / this.pinchStartLen;\r\n                    evt.zoom = evt.singleZoom * this.lastZoom;\r\n                    this.tempZoom = evt.zoom;\r\n                    evt.type = \"pinch\";\r\n                    this._option.pinch(evt);\r\n                }\r\n\r\n                evt.angle = getRotateAngle(v, preV);\r\n                evt.type = \"rotate\";\r\n                this._option.rotate(evt);\r\n            }\r\n            preV.x = v.x;\r\n            preV.y = v.y;\r\n        } else {\r\n            if (this.x2 !== null) {\r\n                evt.deltaX = currentX - this.x2;\r\n                evt.deltaY = currentY - this.y2;\r\n\r\n            } else {\r\n                evt.deltaX = 0;\r\n                evt.deltaY = 0;\r\n            }\r\n            this._option.pressMove(evt);\r\n        }\r\n\r\n        this._option.touchMove(evt);\r\n\r\n        this._cancelLongTap();\r\n        this.x2 = currentX;\r\n        this.y2 = currentY;\r\n        if (len > 1) {\r\n            // evt.preventDefault();\r\n        }\r\n    }\r\n    end(evt) {\r\n        if (!evt.changedTouches) return;\r\n        this._cancelLongTap();\r\n        let self = this;\r\n        evt.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2); //在结束钩子都加入方向判断，但触发swipe瞬时必须位移大于30\r\n        if (evt.touches.length < 2) {\r\n            this.lastZoom = this.tempZoom;\r\n            this._option.multipointEnd(evt);\r\n        }\r\n        this._option.touchEnd(evt);\r\n        //swipe\r\n        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\r\n            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\r\n            // evt.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\r\n            this.swipeTimeout = setTimeout(function () {\r\n                evt.type = \"swipe\";\r\n                self._option.swipe(evt);\r\n\r\n            }, 0)\r\n        } else {\r\n            this.tapTimeout = setTimeout(function () {\r\n                evt.type = \"tap\";\r\n                self._option.tap(evt);\r\n                // trigger double tap immediately\r\n                if (self.isDoubleTap) {\r\n                    evt.type = \"doubleTap\";\r\n                    self._option.doubleTap(evt);\r\n                    clearTimeout(self.singleTapTimeout);\r\n                    self.isDoubleTap = false;\r\n                }\r\n            }, 0)\r\n\r\n            if (!self.isDoubleTap) {\r\n                self.singleTapTimeout = setTimeout(function () {\r\n                    self._option.singleTap(evt);\r\n                }, 250);\r\n            }\r\n        }\r\n\r\n        this.preV.x = 0;\r\n        this.preV.y = 0;\r\n        this.scale = 1;\r\n        this.pinchStartLen = null;\r\n        this.x1 = this.x2 = this.y1 = this.y2 = null;\r\n    }\r\n    cancel(evt) {\r\n        clearTimeout(this.singleTapTimeout);\r\n        clearTimeout(this.tapTimeout);\r\n        clearTimeout(this.longTapTimeout);\r\n        clearTimeout(this.swipeTimeout);\r\n        this._option.touchCancel(evt);\r\n    }\r\n    _cancelLongTap() {\r\n        clearTimeout(this.longTapTimeout);\r\n    }\r\n\r\n    _cancelSingleTap() {\r\n        clearTimeout(this.singleTapTimeout);\r\n    }\r\n\r\n    _swipeDirection(x1, x2, y1, y2) {\r\n        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down')\r\n    }\r\n    destroy() {\r\n        if (this.singleTapTimeout) clearTimeout(this.singleTapTimeout);\r\n        if (this.tapTimeout) clearTimeout(this.tapTimeout);\r\n        if (this.longTapTimeout) clearTimeout(this.longTapTimeout);\r\n        if (this.swipeTimeout) clearTimeout(this.swipeTimeout);\r\n\r\n        this._option.rotate = null;\r\n        this._option.touchStart = null;\r\n        this._option.multipointStart = null;\r\n        this._option.multipointEnd = null;\r\n        this._option.pinch = null;\r\n        this._option.swipe = null;\r\n        this._option.tap = null;\r\n        this._option.doubleTap = null;\r\n        this._option.longTap = null;\r\n        this._option.singleTap = null;\r\n        this._option.pressMove = null;\r\n        this._option.touchMove = null;\r\n        this._option.touchEnd = null;\r\n        this._option.touchCancel = null;\r\n\r\n        this.preV = this.pinchStartLen = this.scale = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = null;\r\n\r\n        return null;\r\n    }\r\n};exports.default = MinaTouch\r\n\r\nfunction getLen(v) {\r\n    return Math.sqrt(v.x * v.x + v.y * v.y);\r\n}\r\n\r\nfunction dot(v1, v2) {\r\n    return v1.x * v2.x + v1.y * v2.y;\r\n}\r\n\r\nfunction getAngle(v1, v2) {\r\n    let mr = getLen(v1) * getLen(v2);\r\n    if (mr === 0) return 0;\r\n    let r = dot(v1, v2) / mr;\r\n    if (r > 1) r = 1;\r\n    return Math.acos(r);\r\n}\r\n\r\nfunction cross(v1, v2) {\r\n    return v1.x * v2.y - v2.x * v1.y;\r\n}\r\n\r\nfunction getRotateAngle(v1, v2) {\r\n    let angle = getAngle(v1, v2);\r\n    if (cross(v1, v2) > 0) {\r\n        angle *= -1;\r\n    }\r\n\r\n    return angle * 180 / Math.PI;\r\n}"]}